## Pascal's triangle
## https://codingcompetitions.withgoogle.com/codejam/round/000000000019fd74/00000000002b1353
def pwalk(N):
    if N <= 30:
        [print(i,1) for i in range(1, N+1)]
    else:
        brep,leftEdge,dec = bin(N-30)[2:][::-1],True,0
        for i in range(1, len(brep)+1):
            if brep[i-1] == "0":
                print(i, 1) if leftEdge else print(i, i)
                dec += 1
            else:
                [print(i, j+1) for j in range(i)] if leftEdge else [print(i,i-j)for j in range(i)]
                leftEdge, dec = not leftEdge, dec + 2**(i-1)
        for j in range(N - dec):
            print(j+i+1,1) if leftEdge else print(i+j+1,i+j+1)
for i in range(1, int(input())+1):
    print("Case #{}:".format(i))
    pwalk(int(input()))

## Pattern Matching
## https://codingcompetitions.withgoogle.com/codejam/round/000000000019fd74/00000000002b3034
for case in range(1, 1+int(input())):
    def solve():
        prefs,mids,suffs = [],[],[]
        for _ in range(int(input())):
            pref, *mid, suff = input().split('*')
            prefs.append(pref)
            mids += mid
            suffs.append(suff)
        pref, suff = max(prefs, key=len), max(suffs, key=len)
        if (all(pref.startswith(x) for x in prefs) and 
            all(suff.endswith(x) for x in suffs)):
            return pref + ''.join(mids) + suff
    print("Case #{}:".format(case), solve() or '*')

## Square Dance
## https://codingcompetitions.withgoogle.com/codejam/round/000000000019fd74/00000000002b1355
class Dancer:
    def __init__(self, skill=0):
        self.skill = skill
        self.nbrs = [0,0,0,0]
    def n_nbrs(self):
        return 4 - self.nbrs.count(0)
    def stronger_or_same(self):
        return self.skill >= sum([nbr.skill if nbr else 0 for nbr in self.nbrs])/self.n_nbrs() if self.n_nbrs() else True
def squareDance(floor, n, m):
    for i in range(n):
        for j in range(m):
            floor[i][j] = Dancer(floor[i][j])
    for i in range(n):
        for j in range(m):
            floor[i][j].nbrs[0] = 0 if i == 0 else floor[i-1][j]
            floor[i][j].nbrs[2] = 0 if j == 0 else floor[i][j-1]
            floor[i][j].nbrs[1] = 0 if i == n-1 else floor[i+1][j]
            floor[i][j].nbrs[3] = 0 if j == m-1 else floor[i][j+1]
    floor = [dancer for row in floor for dancer in row]
    res = sum([dancer.skill for dancer in floor])
    dancers_left = len(floor)
    while True:
        if n == 1 and m == 1:
            return res
        count,toEliminate = 0,[]
        for i in range(len(floor)):
            if not floor[i].stronger_or_same():
                pass
                toEliminate.append(i - len(toEliminate))
        for i in toEliminate:
            if floor[i].nbrs[0]:
                floor[i].nbrs[0].nbrs[1] = floor[i].nbrs[1]
            if floor[i].nbrs[1]:
                floor[i].nbrs[1].nbrs[0] = floor[i].nbrs[0]
            if floor[i].nbrs[2]:
                floor[i].nbrs[2].nbrs[3] = floor[i].nbrs[3]
            if floor[i].nbrs[3]:
                floor[i].nbrs[3].nbrs[2] = floor[i].nbrs[2]
            floor.pop(i)
        if dancers_left == len(floor):
            return res
        dancers_left,res=len(floor),res+sum([dancer.skill for dancer in floor])
for i in range(1, int(input()) + 1):
    n, m = [int(s) for s in input().split(" ")]
    print("Case #{}: {}".format(i, squareDance([[int(s) for s in input().split(" ")] for i in range(n)], n, m)))
