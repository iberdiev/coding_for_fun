## Pascal's triangle
## https://codingcompetitions.withgoogle.com/codejam/round/000000000019fd74/00000000002b1353
def pwalk(N):
    if N <= 30:
        [print(i,1) for i in range(1, N+1)]
    else:
        brep,leftEdge,dec = bin(N-30)[2:][::-1],True,0
        for i in range(1, len(brep)+1):
            if brep[i-1] == "0":
                print(i, 1) if leftEdge else print(i, i)
                dec += 1
            else:
                [print(i, j+1) for j in range(i)] if leftEdge else [print(i,i-j)for j in range(i)]
                leftEdge, dec = not leftEdge, dec + 2**(i-1)
        for j in range(N - dec):
            print(j+i+1,1) if leftEdge else print(i+j+1,i+j+1)
for i in range(1, int(input())+1):
    print("Case #{}:".format(i))
    pwalk(int(input()))

## Pattern Matching
## https://codingcompetitions.withgoogle.com/codejam/round/000000000019fd74/00000000002b3034
for case in range(1, 1+int(input())):
    def solve():
        prefs,mids,suffs = [],[],[]
        for _ in range(int(input())):
            pref, *mid, suff = input().split('*')
            prefs.append(pref)
            mids += mid
            suffs.append(suff)
        pref, suff = max(prefs, key=len), max(suffs, key=len)
        if (all(pref.startswith(x) for x in prefs) and 
            all(suff.endswith(x) for x in suffs)):
            return pref + ''.join(mids) + suff
    print("Case #{}:".format(case), solve() or '*')

## Square Dance
## https://codingcompetitions.withgoogle.com/codejam/round/000000000019fd74/00000000002b1355
directions = [(-1, 0), (0, -1), (1, 0), (0, 1)]
def square_dance(r,c,floor):
    r_int_lev,nbrs,on_floor=sum(map(sum,floor)),[[[(-1,-1)]*4 for _ in range(c)]for _ in range(r)],[[True]*c for i in range(r)]
    def weak(i,j):return floor[i][j]*sum(I!=-1 for I,J in nbrs[i][j])<sum(floor[I][J]for I,J in nbrs[i][j]if I!=-1)
    c_int_lev,to_eliminate=0,[]
    for i in range(r):
        for j in range(c):
            for d, (di, dj) in enumerate(directions):
                if 0 <=i+di<r and 0<=j+dj<c:nbrs[i][j][d]=i+di,j+dj
            if weak(i,j):to_eliminate.append((i,j))
    while to_eliminate:
        c_int_lev,dancers=c_int_lev+r_int_lev,set()
        for i,j in to_eliminate:
            dancers|={(I,J)for I,J in nbrs[i][j]if I!=-1}
            r_int_lev-=floor[i][j]
            on_floor[i][j]=False
        for i,j in to_eliminate:
            for d in range(4):
                I,J=nbrs[i][j][d]
                if I!=-1:nbrs[I][J][d^2]=nbrs[i][j][d^2]
        to_eliminate=[(i,j)for i,j in dancers if on_floor[i][j]and weak(i,j)]
    return c_int_lev+r_int_lev
for i in range(1,int(input())+1):
    r,c=list(map(int,input().split()))
    print("Case #{}:".format(i),square_dance(r,c,[[int(n)for n in input().split()]for _ in range(r)]))